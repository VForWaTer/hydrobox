
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/geostat/plot_variogram.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_geostat_plot_variogram.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_geostat_plot_variogram.py:


Estimate a Variogram
====================

Use the geostatistics toolbox to estimate a variogram and use one of the many
plots. These plots help to understand the spatial properties of a variogram,
and finally, the :class:`Variogram <skgstat.Variogram>` object itself can be
returned and used in one of the Kriging routines.

.. GENERATED FROM PYTHON SOURCE LINES 11-18

.. code-block:: default

    from pprint import pprint
    import plotly
    import hydrobox
    from hydrobox.data import pancake
    from hydrobox.plotting import plotting_backend
    plotting_backend('plotly')








.. GENERATED FROM PYTHON SOURCE LINES 19-20

Load sample data from the data sub-module

.. GENERATED FROM PYTHON SOURCE LINES 20-23

.. code-block:: default


    df = pancake()








.. GENERATED FROM PYTHON SOURCE LINES 24-28

Estimate a variogram using a exponential model and 25 distance lags
that are derived from a KMeans cluster algorithm
Here, we use the describe output option to get a dictionary of 
all variogram parameters

.. GENERATED FROM PYTHON SOURCE LINES 28-40

.. code-block:: default


    vario = hydrobox.geostat.variogram(
        coordinates=df[['x', 'y']].values,
        values=df.z.values,
        model='exponential',
        bin_func='kmeans',
        n_lags=25,
        return_type='describe'
    )
    # print
    pprint(vario)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'dist_func': 'euclidean',
     'effective_range': 440.23387689607966,
     'estimator': 'matheron',
     'kwargs': {},
     'model': 'exponential',
     'normalized_effective_range': 246442.01433239583,
     'normalized_nugget': 0,
     'normalized_sill': 2423777.7530702623,
     'nugget': 0,
     'params': {'bin_func': 'kmeans',
                'dist_func': 'euclidean',
                'estimator': 'matheron',
                'fit_method': 'trf',
                'fit_sigma': None,
                'maxlag': None,
                'model': 'exponential',
                'n_lags': 25,
                'normalize': False,
                'use_nugget': False,
                'verbose': False},
     'sill': 1556.8486609398685}




.. GENERATED FROM PYTHON SOURCE LINES 41-43

There are various return types, one of them is the plot.
This is the main plotting tool for variogram instances

.. GENERATED FROM PYTHON SOURCE LINES 43-55

.. code-block:: default

    fig = hydrobox.geostat.variogram(
        coordinates=df[['x', 'y']].values,
        values=df.z.values,
        model='exponential',
        bin_func='kmeans',
        n_lags=25,
        return_type='plot'
    )

    # show the figure
    plotly.io.show(fig)




.. raw:: html
    :file: images/sphx_glr_plot_variogram_001.html





.. GENERATED FROM PYTHON SOURCE LINES 56-58

Alternatively you can return the :class:`Variogram <skgstat.Variogram>`
object itself and use all the different settings and methods directly.

.. GENERATED FROM PYTHON SOURCE LINES 58-70

.. code-block:: default


    v = hydrobox.geostat.variogram(
        coordinates=df[['x', 'y']].values,
        values=df.z.values,
        model='exponential',
        bin_func='kmeans',
        n_lags=25,
        return_type='object'
    )

    pprint(v)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    < exponential Semivariogram fitted to 25 bins >




.. GENERATED FROM PYTHON SOURCE LINES 71-74

The :class:`Variogram <skgstat.Variogram>` has a plotting method for
all point pairs at their separating distances. It is available as a 
return type, but can also be called directly:

.. GENERATED FROM PYTHON SOURCE LINES 74-78

.. code-block:: default

    fig = v.distance_difference_plot() 

    plotly.io.show(fig)




.. raw:: html
    :file: images/sphx_glr_plot_variogram_002.html





.. GENERATED FROM PYTHON SOURCE LINES 79-86

The variogram instance has a lot of quality measures to judge the goodness
of fit for the theoretical model. They are implemented as properties and can
be used like attribtues, while being always up to date if the variogram is mutated.
Another helpful method is :func:`cross_validate <skgstat.Variogram.cross_validate>`.
This will run a leave-one-out cross validation by interpolating the missing point for 
all points. This is especially useful in cases, where a theoretical model fits well,
but the spatial properties are not well captured. 

.. GENERATED FROM PYTHON SOURCE LINES 86-96

.. code-block:: default


    # calculate the rmse of the model
    print(f"{v.model.__name__} RMSE:  {v.rmse}")

    # get the cross-validation time
    from time import time
    t1 = time()
    rmse = v.cross_validate()
    t2 = time()
    print('Cross-validated RMSE: %.2f  (took: %2fs)' % (rmse, t2 - t1))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    exponential RMSE:  39.91457083112962
    Cross-validated RMSE: 12.08  (took: 5.382931s)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  15.624 seconds)


.. _sphx_glr_download_auto_examples_geostat_plot_variogram.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_variogram.py <plot_variogram.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_variogram.ipynb <plot_variogram.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
