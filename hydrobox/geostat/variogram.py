import numpy as np
import skgstat as skg
import gstools as gs

from hydrobox.geostat import typing
from hydrobox.plotting import plot_function_loader


def variogram(
    coordinates: np.ndarray,
    values: np.ndarray,
    estimator: typing.Estimator = 'matheron',
    model: typing.Model = 'spherical',
    dist_func: typing.DistFunc = 'euclidean',
    bin_func: typing.BinFunc = 'even',
    fit_method: typing.FitMethod = 'trf',
    fit_sigma: typing.FitSigma = None,
    use_nugget: bool = False,
    maxlag: typing.Maxlag = None,
    n_lags: typing.Union[int, None] = 10,
    return_type: typing.Literal['object', 'describe', 'plot', 'distance_difference', 'location_trend', 'scattergram'] = 'object',
    **kwargs
) -> skg.Variogram:
    """
    Uses scikit-gstat to estimate a Variogram. 
    Refer to the :class:`Variogram <skgstat.Variogram>` class
    to learn about the different Parameters.

    Parameters
    ----------
    return_type : str
        Specify how the Variogram instance should be returned. Object will
        return the actual instance. 'describe' is the dictionary output
        generated by the class, which is serializable. All other options
        return the different plot types

    Returns
    -------
    variogram : skgstat.Variogram
        If the return type is `'object'`
    plot : plotly.Figure, matplotlib.pyplot.Figure
        If the return type is one of the plots
    description : dict
        If the return type is `'describe'`

    """
    # create the variogram
    v = skg.Variogram(
        coordinates=coordinates,
        values=values,
        estimator=estimator,
        model=model,
        dist_func=dist_func,
        bin_func=bin_func,
        fit_method=fit_method,
        fit_sigma=fit_sigma,
        use_nugget=use_nugget,
        maxlag=maxlag,
        n_lags=n_lags,
        **kwargs
    )

    if return_type == 'object':
        return v
    elif return_type == 'describe':
        return v.describe(short=False, flat=False)
    
    # otherwise create a plot
    pfunc = plot_function_loader('variogram')
    fig = pfunc(
        func_args=dict(
            variogram=v,
            plot_type=return_type
        ), 
        plot_args=kwargs
    )
    return fig


