"""
The io.random module holds a number of functions returning random `pandas.Series` or `numpy.ndarray` objects
that can be used for developing purposes, or whenever randomized data is needed.
"""
import numpy as np
import pandas as pd
from datetime import datetime

from hydrobox.utils.decorators import accept


@accept(distribution=str,
        size=(int, 'None'),
        seed=(int, 'None'),
        start=(str, datetime, 'None'),
        end=(str, datetime, 'None'),
        freq=(str, 'None'))
def timeseries_from_distribution(distribution='gamma', distribution_args=[10, 2], size=10, seed=None,
                                 start='now', end=None, freq='D'):
    """
    Generate a time series
    ----------------------

    This function will return a `pandas.Series` index by a `pandas.DatetimeIndex` holding random data that
    is generated by the given distribution. The distribution name has to be importable from `numpy.random`
    and the distribution_args list will be passed as *args.
    The seed parameter will be directed to `np.random.seed` in order to return reproducable pseudo-random
    results.

    The time series index can be controlled by the `size`, `start`, `end` and `freq` parameter. The `size`
    specifies the total length of the time series. If `None`, the `size` will be inferred from `start`,
    `end` and `freq`. If `size` is given, `freq` will be ignored. If `end` is is not given, the other
    three parameter have to be set.

    Parameter
    ---------
    :param distribution:
    :param distribution_args:
    :param size:
    :param seed:
    :param start:
    :param end:
    :param freq:
    :return:
    """
    # get the function
    try:
        distribution_function = getattr(np.random, distribution)
    except AttributeError:
        raise ValueError('The distribution %s is not known. It has to be importable from numpy.random' % distribution)

    # get start and end
    if isinstance(start, str) and start.lower() == 'now':
        start = datetime.now()
    if isinstance(start, datetime):
        start = start.strftime('%Y%m%d%H%M%S')

    if isinstance(end, str) and end.lower() == 'now':
        end = datetime.now()
    if isinstance(end, datetime):
        end = end.strftime('%Y%m%d%H%M%S')

    # build the DatetimeIndex and infer size
    index = pd.date_range(start=start, end=end, periods=size, freq=freq)
    inferred_size = len(index)

    # set the seed if neccessary
    if seed is not None:
        np.random.seed(seed=seed)

    # generate the distribution
    values = distribution_function(*distribution_args, size=inferred_size)

    # return the time series
    return pd.Series(index=index, data=values)
